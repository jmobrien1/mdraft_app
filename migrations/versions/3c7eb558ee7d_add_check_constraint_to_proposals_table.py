"""add check constraint to proposals table

Revision ID: 3c7eb558ee7d
Revises: add_anonymous_proposal_support
Create Date: 2025-08-14 13:39:57.210608

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '3c7eb558ee7d'
down_revision = 'add_anonymous_proposal_support'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('proposals', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_proposals_expires_at'), ['expires_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_proposals_visitor_session_id'), ['visitor_session_id'], unique=False)

    # Add check constraint to ensure at least one owner is present
    # Note: SQLite doesn't support CHECK constraints in the same way as PostgreSQL
    # This will be handled at the application level for SQLite
    # For PostgreSQL, the constraint will be enforced at the database level
    try:
        op.execute("ALTER TABLE proposals ADD CONSTRAINT ck_proposals_owner_present CHECK ((user_id IS NOT NULL) OR (visitor_session_id IS NOT NULL))")
    except Exception:
        # SQLite doesn't support this constraint, so we'll skip it
        pass

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Remove check constraint
    try:
        op.execute("ALTER TABLE proposals DROP CONSTRAINT IF EXISTS ck_proposals_owner_present")
    except Exception:
        # SQLite doesn't support this constraint, so we'll skip it
        pass
    
    with op.batch_alter_table('proposals', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_proposals_visitor_session_id'))
        batch_op.drop_index(batch_op.f('ix_proposals_expires_at'))

    # ### end Alembic commands ###
